h1.page-header
  - if params[:relation]
    | 相关举报列表
  - else
    | #{Complaint.model_name.human}列表
  .pull-right
    = link_to '返回审核', edit_admin_complaint_path(@complaint), class: 'btn btn-primary' if params[:relation]

.panel.panel-default
  .panel-heading
    .panel-heading-btn
      a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"
        i class="fa fa-expand"
      a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"
        i class="fa fa-minus"
    h3.panel-title &nbsp;
  .panel-body
    = form_for :search, url:  admin_complaints_path, method: :get do |f|
      .toolbar.row
        .col-md-12
          p
            |支持SIMILAR TO查询语法, %代表匹配所有，_代表匹配一个字符
            a<[href="https://www.postgresql.org/docs/current/static/functions-matching.html" target="_blank"]查看详情说明
      .toolbar.row
        .col-md-6.m-b-15
          = f.hidden_field :complaint_type, class: 'complaint_type_dom_input', val: params[:search].present? ? params[:search][:complaint_type] : nil
          .input-group.search_all
            .input-group-btn.complaint_type_select
              button.btn.btn-default.dropdown-toggle[type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"]
                span.text
                  -if params[:search].present?
                    - case params[:search][:complaint_type]
                    - when 'community_feedback'
                      | 筛选类型 - 小区反馈
                    - when 'complaint'
                      | 筛选类型 - 投诉
                    - else
                      | 筛选类型 - 无
                  - else
                    | 筛选类型 - 无
                span.caret
              ul.dropdown-menu
                li
                  a[data-type=''] 筛选类型 - 无
                  - if Settings.project.imolin?
                    a[data-type='community_feedback'] 筛选类型 - 小区反馈
                    a[data-type='complaint'] 筛选类型 - 投诉
                  - elsif Settings.project.meikemei?
                    a[data-type='staff_new'] 筛选类型 - 美容师入驻
                    a[data-type='complaint'] 筛选类型 - 投诉
            = f.text_field :keywords, value: params[:search]&&params[:search][:keywords], class: 'form-control', placeholder: '关键字搜索...'
            / <!-- Split button -->
            / <div class="btn-group">
            /   <button  class=""></button>
            /   <button type="button" class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            /     <span class="caret"></span>
            /     <span class="sr-only">Toggle Dropdown</span>
            /   </button>
            /   <ul class="dropdown-menu">
            /     <li><a href="#">Action</a></li>
            /     <li><a href="#">Another action</a></li>
            /     <li><a href="#">Something else here</a></li>
            /     <li role="separator" class="divider"></li>
            /     <li><a href="#">Separated link</a></li>
            /   </ul>
            / </div>
            span.input-group-btn
              button.btn.btn-inverse[type='submit']
                i.fa.fa-search
        / .col-md-6.m-b-15
        /   .btn-group
        /     button.btn.btn-default.dropdown-toggle[type='button'data-toggle='dropdown']
        /       | 筛选列名
        /       span.caret
        /     ul.dropdown-menu#search_column[role='menu']
        /       - @filter_colums.each do |filter_colum|
        /         li
        /           a[href='javascript:;' data-key=filter_colum] = Complaint.human_attribute_name(filter_colum.to_sym)
        /   .btn-group.pull-right[data-toggle='tooltip'title='导出文件'data-placement='left']
        /     button.btn.btn-default[type='submit'name='json'value='json'] json
        /     button.btn.btn-default[type='submit'name='xml'value='xml'] xml
        /     button.btn.btn-default[type='submit'name='csv'value='csv'] csv
      .well.form-horizontal.filter_search[class==params[:filters]?'show':'hidden']
        - if params[:filters] && !params[:filters].keys.blank?
          .top.small.m-b-10 * 以下输入值将完全匹配字段对应值
          - params[:filters].keys.each do |key|
            .form-group
              label.col-xs-1.control-label
                i.fa.fa-trash-o.m-r-5
                b = Complaint.human_attribute_name(key.to_sym)
              - input_name = "filters["+key+"]"
              .col-xs-5
                input.form-control[type="text"name==input_name value==params[:filters][key]]
        hr.filters_box
        button.btn.btn-inverse.p-l-20.p-r-20.pull-center[type='submit'] 搜索
    - if params[:search]
      .alert.alert-success.m-b-15
        strong
          = "查询："
        span
          = @complaints.size.to_s + "条记录"
        span.close[data-dismiss="alert"]
          | ×
    .table-responsive.row.m-0
      table.table.table-striped.table-bordered
        thead
          tr
            th 类型
            th 举报对象
            th 举报对象编号
            th = Settings.project.meikemei? ? '内容' : '举报原因'
            th 时间
            th
        tbody
          - @complaints.each do |complaint|
            tr
              td
                = enum_l(complaint, :complaint_type)
              td
                = (complaint.source_type.to_s == 'Comment::Entry' ? '评论' : Object::const_get(complaint.source_type).model_name.human) if complaint.complaint?
              td
                = (complaint.source_type.to_s == 'Comment::Entry' ? "#{complaint.source.content.slice(0, 10)}..." : complaint.source.title) if complaint.complaint?
              td
                = "#{complaint.reason.slice(0, 10)}..." unless complaint.reason.blank?
              td
                = complaint.created_at.strftime("%Y-%m-%d %H:%M:%S")
              td
                - if complaint.status.blank? && Settings.project.imolin?
                  => link_to '审核', edit_admin_complaint_path(complaint), class: 'btn btn-xs btn-primary'
                => link_to '查看', admin_complaint_path(complaint), class: 'btn btn-xs btn-success'
                = link_to '删除', admin_complaint_path(complaint), data: { confirm: '确定要删除吗?' }, method: :delete, class: 'btn btn-xs btn-danger'
      = paginate @complaints

/ TODO: move this code to application.js
javascript:
  $(document).ready(function(){
    bindRemoveLabel('.well.filter_search label.control-label');
    $('form .complaint_type_select ul.dropdown-menu li a').off().on('click', function() {
      $('.search_all .complaint_type_select button .text').text($(this).text())
      $('input.complaint_type_dom_input').val($(this).data('type'))
    })

    $('form #search_column li a').off().on('click', function(){
      if($('.well.filter_search .form-group').length == 0){
        $('.well.form-horizontal.filter_search').removeClass('hidden').addClass('show');
      }
      var column_name = $(this).text();
      var column_key = $(this).data('key');
      var name = "filters["+ column_key +"]";
      input_name = "input[name='" + name +"']";
      if(!$('.well.filter_search').find(input_name).length > 0){
        $('.well.filter_search hr').before("<div class='form-group'><label class='col-xs-1 control-label'><i class='fa fa-trash-o m-r-5'></i><b>"+ column_name +"</b></label><div class='col-xs-5'><input class='form-control' name='"+ name +"' type='text'></div></div>");
        $('.well.filter_search .control-label i.fa-trash-o').off();
        bindRemoveLabel('.well.filter_search label.control-label');
      }
    })

    function bindRemoveLabel(dom){
      $(dom).on('click', function(){
        $(this).parent('.form-group').remove();
        if($('.well.filter_search .form-group').length == 0){
          $('.well.filter_search').addClass('hidden');
        }
      })
    }

  })
